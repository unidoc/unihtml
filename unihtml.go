//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package unihtml contains a plugin for the UniDoc.
package unihtml ;import (_ff "bytes";_c "context";_b "errors";_gc "fmt";_fd "github.com/unidoc/unihtml/client";_ed "github.com/unidoc/unihtml/content";_e "github.com/unidoc/unihtml/selector";_dd "github.com/unidoc/unihtml/sizes";_aa "github.com/unidoc/unipdf/v4/common";
_ea "github.com/unidoc/unipdf/v4/common/license";_gd "github.com/unidoc/unipdf/v4/creator";_ba "github.com/unidoc/unipdf/v4/model";_fe "github.com/unidoc/unipdf/v4/render";_ga "image";_g "image/color";_a "math";_dg "net/url";_d "os";_gg "time";);

// WaitReady waits for the provided selector to be ready.
// A selector might be  i.e.  `#example` for id  and `.example` for classes. The second parameter defines how to match given selector.
func (_gab *Document )WaitReady (sel string ,by ..._e .ByType ){_fg :=_e .BySearch ;if len (by )> 0{_fg =by [0];};_gab ._cgg =append (_gab ._cgg ,_fd .BySelector {Selector :sel ,By :_fg });};

// ContainerComponent implements creator.containerElement interface.
func (_eabg *Document )ContainerComponent (container _gd .Drawable )(_gd .Drawable ,error ){switch container .(type ){case *_gd .Chapter :default:return nil ,_gc .Errorf ("\u0075\u006e\u0069\u0068t\u006d\u006c\u002e\u0044\u006f\u0063\u0075\u006d\u0065n\u0074\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0063\u006f\u006d\u0070\u006fn\u0065\u006e\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0025\u0054\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072",container );
};return _eabg ,nil ;};

// NewDocument creates new HTML Document used as an input for the creator.Drawable.
func NewDocument (path string )(*Document ,error ){_ab :=&Document {};_cd ,_ag :=_dg .Parse (path );if _ag !=nil {return nil ,_ag ;};switch _cd .Scheme {case "\u0068\u0074\u0074\u0070","\u0068\u0074\u0074p\u0073":_ab ._da ,_ag =_ed .NewWebURL (path );if _ag !=nil {return nil ,_ag ;
};return _ab ,nil ;};_bdb ,_ag :=_d .Stat (path );if _ag !=nil {return nil ,_ag ;};if !_bdb .IsDir (){_ab ._da ,_ag =_ed .NewHTMLFile (path );}else {_ab ._da ,_ag =_ed .NewZipDirectory (path );};if _ag !=nil {return nil ,_ag ;};return _ab ,nil ;};

// WriteToFile writes the document to a file defined by the output path.
func (_edf *Document )WriteToFile (outputPath string )error {if _bbg :=_edf .validate ();_bbg !=nil {return _bbg ;};_ge :=_gg .Second *20+_edf ._bb ;_eaaa ,_deb :=_c .WithTimeout (_c .Background (),_ge );defer _deb ();_gdc ,_dfe :=_edf .extract (_eaaa ,_edf ._edc ,_edf ._df ,_edf .getMargins ());
if _dfe !=nil {return _dfe ;};_ee :=_gd .New ();for _ ,_efa :=range _gdc {if _dfe =_ee .AddPage (_efa );_dfe !=nil {return _dfe ;};};return _ee .WriteToFile (outputPath );};

// TrimLastPageContent trims the last page content so that next creator blocks are located just at the end of given block.
func (_gf *Document )TrimLastPageContent (){_gf ._bda =true };var _ _gd .Drawable =(*Document )(nil );var ErrNoClient =_b .New ("\u0055n\u0069\u0048\u0054\u004d\u004c\u0020\u0063\u006c\u0069\u0065\u006et\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");


// SetLandscapeOrientation sets document landscape page orientation.
func (_cbc *Document )SetLandscapeOrientation (){_cbc ._ggf =_dd .Landscape };

// Options are the HTML Client options used for establishing the connection.
type Options struct{

// Hostname defines the hostname for the client. Default value: 'localhost'.
Hostname string ;

// Port defines the port at which the server works. Default value: '8080'
Port int ;

// Secure is the flag that states if the connection uses HTTPS protocol. Default Value: 'false'.
Secure bool ;

// Prefix is an option setting used when the server is working with the URI prefix. Default Value: ''.
Prefix string ;};

// SetMargins sets the Document Margins.
func (_agc *Document )SetMargins (left ,right ,top ,bottom float64 ){_agc ._bc .Left =_dd .Point (left );_agc ._bc .Right =_dd .Point (right );_agc ._bc .Top =_dd .Point (top );_agc ._bc .Bottom =_dd .Point (bottom );_agc ._dac =_gd .PositionAbsolute ;
};

// SetMarginRight sets the left margin.
func (_afc *Document )SetMarginRight (margin _dd .Length ){_afc ._bc .Right =margin };

// Document is HTML document wrapper that is used for extracting and converting HTML document into PDF pages.
type Document struct{_da _ed .Content ;_bc margins ;_dac _gd .Positioning ;_cg ,_dga float64 ;_fa _dd .PageSize ;_edc ,_df _dd .Length ;_ggf _dd .Orientation ;_bda bool ;_bb _gg .Duration ;_cgg []_fd .BySelector ;_cgd []_fd .BySelector ;_ef *_gg .Duration ;
};

// Connect creates UniHTML HTTP Client and tries to establish connection with the server.
func Connect (path string )error {if _ac :=_dge ();_ac !=nil {return _ac ;};_dc ,_fb :=_fd .ParseOptions (path );if _fb !=nil {return _fb ;};_ffd =_fd .New (_dc );_ggb ,_bd :=_c .WithTimeout (_c .Background (),_gg .Second *5);defer _bd ();if _gge :=_ffd .HealthCheck (_ggb );
_gge !=nil {return _gge ;};return nil ;};

// SetPageHeight sets the page height for given document.
func (_eed *Document )SetPageHeight (pageHeight _dd .Length )error {_eed ._df =pageHeight ;_eed ._dac =_gd .PositionAbsolute ;return nil ;};

// SetPageSize sets the page default size.
func (_cbfb *Document )SetPageSize (pageSize _dd .PageSize )error {if !pageSize .IsAPageSize (){return _b .New ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006ev\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0067\u0065\u0020s\u0069\u007a\u0065");
};_cbfb ._fa =pageSize ;_cbfb ._dac =_gd .PositionAbsolute ;return nil ;};

// SetTimeoutDuration sets the timeout duration
// the default timeout is 15 seconds.
func (_bdg *Document )SetTimeoutDuration (duration _gg .Duration ){_bdg ._ef =&duration };

// SetMarginTop sets the left margin.
func (_aggf *Document )SetMarginTop (margin _dd .Length ){_aggf ._bc .Top =margin };func (_fge *Document )getTimeoutDuration ()_gg .Duration {if _fge ._ef !=nil {return *_fge ._ef ;};return 0;};

// GetContent returns the content of the document.
func (_dfee *Document )GetContent ()_ed .Content {return _dfee ._da };

// ConnectOptions creates UniHTML HTTP Client and tries to establish connection with the server.
func ConnectOptions (o Options )error {_ffd =_fd .New (_fd .Options {Hostname :o .Hostname ,Port :o .Port ,HTTPS :o .Secure });_gcf ,_db :=_c .WithTimeout (_c .Background (),_gg .Second *5);defer _db ();if _dbc :=_ffd .HealthCheck (_gcf );_dbc !=nil {return _dbc ;
};return nil ;};

// WaitTime sets the waiting time before the webpage is rendered to PDF.
func (_egf *Document )WaitTime (duration _gg .Duration ){_egf ._bb =duration };func _eae (_fef _ga .Image )float64 {_ae :=_fef .Bounds ();var (_eeb int ;_cb _g .Color ;_dgb ,_cbf ,_ecf uint32 ;);_cf ,_ca :=_ae .Min .X ,_ae .Max .Y -1;_faa :=_fef .At (_cf ,_ca );
_agg ,_ggd ,_ecff ,_ :=_faa .RGBA ();_gaf :=_agg ==_a .MaxUint16 &&_ggd ==_a .MaxUint16 &&_ecff ==_a .MaxUint16 ;for _ca =_ae .Max .Y -1;_ca >=_ae .Min .Y ;_ca --{var _aed bool ;for _cf =_ae .Min .X ;_cf < _ae .Max .X ;_cf ++{_cb =_fef .At (_cf ,_ca );
_dgb ,_cbf ,_ecf ,_ =_cb .RGBA ();if (_gaf &&!(_dgb ==_agg &&_cbf ==_ggd &&_ecff ==_ecf ))||(!_gaf &&(_a .Abs (float64 (_dgb )-float64 (_agg ))/float64 (_a .MaxUint16 )> 0.03||_a .Abs (float64 (_cbf )-float64 (_ggd ))/float64 (_a .MaxUint16 )> 0.03||_a .Abs (float64 (_ecf )-float64 (_ecff ))/float64 (_a .MaxUint16 )> 0.03)){_aed =true ;
break ;};};if _aed {break ;};_eeb =_ca ;};return float64 (_ae .Max .Y -_eeb )/float64 (_ae .Max .Y );};func (_cff *Document )validate ()error {if _ffd ==nil {return ErrNoClient ;};if _cff ._da ==nil {return ErrContentNotDefined ;};return nil ;};

// This method is not supported by Document component and exists solely to satisfy the Drawable interface.
func (_cae *Document )GenerateKDict ()(*_ba .KDict ,error ){return nil ,nil };

// SetPos sets the absolute position. Changes object positioning to absolute.
func (_ccc *Document )SetPos (x ,y float64 ){_ccc ._dac =_gd .PositionAbsolute ;_ccc ._cg =x ;_ccc ._dga =y ;};

// This method is not supported by Document component and exists solely to satisfy the Drawable interface.
func (_cga *Document )SetStructureType (structureType _ba .StructureType ){};type margins struct{Left ,Right ,Bottom ,Top _dd .Length ;};

// GetPdfPages is a function that converts provided input content and
func (_gda *Document )GetPdfPages (ctx _c .Context )([]*_ba .PdfPage ,error ){if _bag :=_gda .validate ();_bag !=nil {return nil ,_bag ;};return _gda .extract (ctx ,_gda ._edc ,_gda ._df ,_gda .getMargins ());};

// SetPageWidth sets the page width for given document.
func (_gcd *Document )SetPageWidth (pageWidth _dd .Length )error {_gcd ._edc =pageWidth ;_gcd ._dac =_gd .PositionAbsolute ;return nil ;};func (_dae *Document )getMargins ()margins {_eb :=_dae ._bc ;if _dae ._dac .IsRelative (){_eb .Top =_dd .Millimeter (1);
_eb .Left =_dd .Millimeter (1);_eb .Bottom =_dd .Millimeter (1);_eb .Right =_dd .Millimeter (1);return _eb ;};if _eb .Top ==nil {_eb .Top =_dd .Millimeter (10);};if _eb .Bottom ==nil {_eb .Bottom =_dd .Millimeter (10);};if _eb .Left ==nil {_eb .Left =_dd .Millimeter (10);
};if _eb .Right ==nil {_eb .Right =_dd .Millimeter (10);};return _eb ;};func _dge ()error {_eg :=_ea .GetLicenseKey ();if _eg ==nil {return _b .New ("\u006e\u006f\u0020\u006cic\u0065\u006e\u0073\u0065\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};if !_eg .IsLicensed (){return _b .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006f\u0072 \u006e\u006f\u0020\u006c\u0069\u0063\u0065n\u0073\u0065\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};return nil ;};var ErrContentNotDefined =_b .New ("\u0068\u0074\u006d\u006c\u0020\u0064o\u0063\u0075\u006d\u0065\u006e\u0074\u0020\u0063\u006f\u006e\u0074\u0065\u006et\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");


// GeneratePageBlocks implements creator.Drawable interface.
func (_eaa *Document )GeneratePageBlocks (ctx _gd .DrawContext )([]*_gd .Block ,_gd .DrawContext ,error ){if _eda :=_eaa .validate ();_eda !=nil {return nil ,ctx ,_eda ;};var _cge []*_gd .Block ;_dee :=_eaa .getMargins ();_fbe ,_ec :=_eaa ._edc ,_eaa ._df ;
if _eaa ._dac .IsRelative (){_fbe ,_ec =_dd .Point (ctx .Width ),_dd .Point (ctx .Height );ctx .X -=float64 (_dee .Left .Points ());}else {ctx .X =_eaa ._cg ;ctx .Y =_eaa ._dga ;};_ddc ,_ead :=_eaa .extract (_c .Background (),_fbe ,_ec ,_dee );if _ead !=nil {return nil ,_gd .DrawContext {},_ead ;
};for _eab ,_gdb :=range _ddc {_fc ,_age :=_gd .NewBlockFromPage (_gdb );if _age !=nil {return nil ,_gd .DrawContext {},_age ;};var _fcc float64 ;if _eaa ._bda &&_eab ==len (_ddc )-1{_bg :=_fe .NewImageDevice ();_agd ,_gb :=_bg .Render (_gdb );if _gb !=nil {return nil ,_gd .DrawContext {},_gb ;
};_ffb ,_gb :=_gdb .GetMediaBox ();if _gb !=nil {return nil ,_gd .DrawContext {},_gb ;};_bf :=_gg .Now ();_bcf :=_eae (_agd );_fcc =_ffb .Height ()*_bcf ;_aa .Log .Trace ("\u0054\u0072i\u006d\u006d\u0069\u006eg\u0020\u006ca\u0073\u0074\u0020\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0070\u0061\u0067\u0065\u0020\u0074\u0061\u006b\u0065n\u003a\u0020\u0025\u0076",_gg .Since (_bf ));
if _eaa ._bc .Bottom !=nil {_fcc -=float64 (_eaa ._bc .Bottom .Points ());};if _fcc < 0{_fcc =0;};_aa .Log .Trace ("C\u0072\u006f\u0070\u0070\u0069\u006e\u0067\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u0027\u0073\u0020\u0070\u0061\u0067\u0065\u0020\u0025\u002e2\u0066 \u0070\u006f\u0069\u006et\u0073\u0020o\u0066\u0066\u0020\u0062\u006f\u0074\u0074\u006f\u006d\u0020\u006f\u0066\u0020\u006d\u0065\u0064\u0069\u0061\u0020\u0062\u006f\u0078\u000a",_fcc );
};_cc ,_gfc ,_age :=_fc .GeneratePageBlocks (ctx );if _age !=nil {return nil ,_gd .DrawContext {},_age ;};ctx =_gfc ;ctx .Y -=_fcc ;if _eab !=len (_ddc )-1&&ctx .Y > (ctx .PageHeight -ctx .Margins .Bottom )*.95{ctx .X =ctx .Margins .Left ;ctx .Y =ctx .Margins .Top ;
ctx .Page ++;};_cge =append (_cge ,_cc ...);};return _cge ,ctx ,nil ;};var _ffd *_fd .Client ;

// SetMarginLeft sets the left margin.
func (_af *Document )SetMarginLeft (margin _dd .Length ){_af ._bc .Left =margin };

// This method is not supported by Document component and exists solely to satisfy the Drawable interface.
func (_debb *Document )SetMarkedContentID (id int64 ){};

// SetMarginBottom sets the left margin.
func (_agf *Document )SetMarginBottom (margin _dd .Length ){_agf ._bc .Bottom =margin };func (_gce *Document )extract (_cbcd _c .Context ,_efc ,_abd _dd .Length ,_fbea margins )([]*_ba .PdfPage ,error ){_efg :=_fd .BuildHTMLQuery ().SetContent (_gce ._da ).PageSize (_gce ._fa ).PaperWidth (_efc ).PaperHeight (_abd ).Orientation (_gce ._ggf ).MarginLeft (_fbea .Left ).MarginRight (_fbea .Right ).MarginTop (_fbea .Top ).MarginBottom (_fbea .Bottom ).TimeoutDuration (_gce .getTimeoutDuration ()).WaitTime (_gce ._bb );
for _ ,_ded :=range _gce ._cgg {_efg .WaitReady (_ded .Selector ,_ded .By );};for _ ,_faac :=range _gce ._cgd {_efg .WaitVisible (_faac .Selector ,_faac .By );};_be ,_agca :=_efg .Query ();if _agca !=nil {return nil ,_agca ;};var _eada _c .CancelFunc ;
if _gce ._ef !=nil {_cbcd ,_eada =_c .WithTimeout (_cbcd ,*_gce ._ef );}else {_cbcd ,_eada =_c .WithTimeout (_cbcd ,_gg .Second *15);};defer _eada ();_efd ,_agca :=_ffd .ConvertHTML (_cbcd ,_be );if _agca !=nil {return nil ,_agca ;};_daf :=_ff .NewReader (_efd .Data );
_fff ,_agca :=_ba .NewPdfReader (_daf );if _agca !=nil {return nil ,_agca ;};return _fff .PageList ,nil ;};

// WaitVisible waits for the provided selector to be ready.
// A selector might be  i.e.  `#example` for id  and `.example` for classes. The second parameter defines how to match given selector.
func (_ffc *Document )WaitVisible (sel string ,by ..._e .ByType ){_dbf :=_e .BySearch ;if len (by )> 0{_dbf =by [0];};_ffc ._cgd =append (_ffc ._cgd ,_fd .BySelector {Selector :sel ,By :_dbf });};

// NewDocumentFromString creates a new Document from the provided HTML string.
func NewDocumentFromString (html string )(*Document ,error ){_ffg ,_de :=_ed .NewStringContent (html );if _de !=nil {return nil ,_de ;};_dab :=&Document {};_dab ._da =_ffg ;return _dab ,nil ;};