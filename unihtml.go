//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package unihtml contains a plugin for the UniDoc.
package unihtml ;import (_ac "bytes";_b "context";_c "errors";_aa "fmt";_gc "github.com/unidoc/unihtml/client";_ge "github.com/unidoc/unihtml/content";_e "github.com/unidoc/unihtml/selector";_dc "github.com/unidoc/unihtml/sizes";_gaa "github.com/unidoc/unipdf/v4/common";
_f "github.com/unidoc/unipdf/v4/common/license";_dcc "github.com/unidoc/unipdf/v4/creator";_da "github.com/unidoc/unipdf/v4/model";_ag "github.com/unidoc/unipdf/v4/render";_a "image";_d "image/color";_ga "math";_be "net/url";_gf "os";_ae "time";);

// Document is HTML document wrapper that is used for extracting and converting HTML document into PDF pages.
type Document struct{_agc _ge .Content ;_eb margins ;_fd _dcc .Positioning ;_ec ,_ab float64 ;_ff _dc .PageSize ;_af ,_ggd _dc .Length ;_fe _dc .Orientation ;_bc bool ;_gfd _ae .Duration ;_bgf []_gc .BySelector ;_ebc []_gc .BySelector ;_bgd *_ae .Duration ;
};

// SetLandscapeOrientation sets document landscape page orientation.
func (_eaf *Document )SetLandscapeOrientation (){_eaf ._fe =_dc .Landscape };

// WaitVisible waits for the provided selector to be ready.
// A selector might be  i.e.  `#example` for id  and `.example` for classes. The second parameter defines how to match given selector.
func (_dbg *Document )WaitVisible (sel string ,by ..._e .ByType ){_dcb :=_e .BySearch ;if len (by )> 0{_dcb =by [0];};_dbg ._ebc =append (_dbg ._ebc ,_gc .BySelector {Selector :sel ,By :_dcb });};

// SetPageWidth sets the page width for given document.
func (_ace *Document )SetPageWidth (pageWidth _dc .Length )error {_ace ._af =pageWidth ;_ace ._fd =_dcc .PositionAbsolute ;return nil ;};

// ContainerComponent implements creator.containerElement interface.
func (_add *Document )ContainerComponent (container _dcc .Drawable )(_dcc .Drawable ,error ){switch container .(type ){case *_dcc .Chapter :default:return nil ,_aa .Errorf ("\u0075\u006e\u0069\u0068t\u006d\u006c\u002e\u0044\u006f\u0063\u0075\u006d\u0065n\u0074\u0020\u0063\u0061\u006e\u0027\u0074\u0020\u0062\u0065\u0020\u0061\u0020\u0063\u006f\u006d\u0070\u006fn\u0065\u006e\u0074\u0020\u006ff\u0020\u0074\u0068\u0065\u0020\u0025\u0054\u0020\u0063\u006f\u006e\u0074\u0061\u0069\u006e\u0065\u0072",container );
};return _add ,nil ;};var ErrContentNotDefined =_c .New ("\u0068\u0074\u006d\u006c\u0020\u0064o\u0063\u0075\u006d\u0065\u006e\u0074\u0020\u0063\u006f\u006e\u0074\u0065\u006et\u0020\u006e\u006f\u0074\u0020\u0064\u0065f\u0069\u006e\u0065\u0064");

// SetPageSize sets the page default size.
func (_afc *Document )SetPageSize (pageSize _dc .PageSize )error {if !pageSize .IsAPageSize (){return _c .New ("\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064\u0020\u0069\u006ev\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0067\u0065\u0020s\u0069\u007a\u0065");
};_afc ._ff =pageSize ;_afc ._fd =_dcc .PositionAbsolute ;return nil ;};var _ _dcc .Drawable =(*Document )(nil );

// GeneratePageBlocks implements creator.Drawable interface.
func (_bdc *Document )GeneratePageBlocks (ctx _dcc .DrawContext )([]*_dcc .Block ,_dcc .DrawContext ,error ){if _dca :=_bdc .validate ();_dca !=nil {return nil ,ctx ,_dca ;};var _dd []*_dcc .Block ;_gaaf :=_bdc .getMargins ();_bga ,_ef :=_bdc ._af ,_bdc ._ggd ;
if _bdc ._fd .IsRelative (){_bga ,_ef =_dc .Point (ctx .Width ),_dc .Point (ctx .Height );ctx .X -=float64 (_gaaf .Left .Points ());}else {ctx .X =_bdc ._ec ;ctx .Y =_bdc ._ab ;};_dad ,_aaf :=_bdc .extract (_b .Background (),_bga ,_ef ,_gaaf );if _aaf !=nil {return nil ,_dcc .DrawContext {},_aaf ;
};for _abf ,_daf :=range _dad {_ea ,_edb :=_dcc .NewBlockFromPage (_daf );if _edb !=nil {return nil ,_dcc .DrawContext {},_edb ;};var _bca float64 ;if _bdc ._bc &&_abf ==len (_dad )-1{_gca :=_ag .NewImageDevice ();_ce ,_ffc :=_gca .Render (_daf );if _ffc !=nil {return nil ,_dcc .DrawContext {},_ffc ;
};_gba ,_ffc :=_daf .GetMediaBox ();if _ffc !=nil {return nil ,_dcc .DrawContext {},_ffc ;};_fg :=_ae .Now ();_beed :=_bfg (_ce );_bca =_gba .Height ()*_beed ;_gaa .Log .Trace ("\u0054\u0072i\u006d\u006d\u0069\u006eg\u0020\u006ca\u0073\u0074\u0020\u0064\u006f\u0063\u0075\u006de\u006e\u0074\u0020\u0070\u0061\u0067\u0065\u0020\u0074\u0061\u006b\u0065n\u003a\u0020\u0025\u0076",_ae .Since (_fg ));
if _bdc ._eb .Bottom !=nil {_bca -=float64 (_bdc ._eb .Bottom .Points ());};if _bca < 0{_bca =0;};_gaa .Log .Trace ("C\u0072\u006f\u0070\u0070\u0069\u006e\u0067\u0020\u0064\u006f\u0063\u0075\u006d\u0065\u006e\u0074\u0027\u0073\u0020\u0070\u0061\u0067\u0065\u0020\u0025\u002e2\u0066 \u0070\u006f\u0069\u006et\u0073\u0020o\u0066\u0066\u0020\u0062\u006f\u0074\u0074\u006f\u006d\u0020\u006f\u0066\u0020\u006d\u0065\u0064\u0069\u0061\u0020\u0062\u006f\u0078\u000a",_bca );
};_de ,_cfa ,_edb :=_ea .GeneratePageBlocks (ctx );if _edb !=nil {return nil ,_dcc .DrawContext {},_edb ;};ctx =_cfa ;ctx .Y -=_bca ;if _abf !=len (_dad )-1&&ctx .Y > (ctx .PageHeight -ctx .Margins .Bottom )*.95{ctx .X =ctx .Margins .Left ;ctx .Y =ctx .Margins .Top ;
ctx .Page ++;};_dd =append (_dd ,_de ...);};return _dd ,ctx ,nil ;};

// SetMarginLeft sets the left margin.
func (_gdb *Document )SetMarginLeft (margin _dc .Length ){_gdb ._eb .Left =margin };

// Connect creates UniHTML HTTP Client and tries to establish connection with the server.
func Connect (path string )error {if _gg :=_ca ();_gg !=nil {return _gg ;};_ad ,_bee :=_gc .ParseOptions (path );if _bee !=nil {return _bee ;};_acd =_gc .New (_ad );_aag ,_fc :=_b .WithTimeout (_b .Background (),_ae .Second *5);defer _fc ();if _bg :=_acd .HealthCheck (_aag );
_bg !=nil {return _bg ;};return nil ;};

// SetMarginBottom sets the left margin.
func (_cb *Document )SetMarginBottom (margin _dc .Length ){_cb ._eb .Bottom =margin };

// SetMargins sets the Document Margins.
func (_ddd *Document )SetMargins (left ,right ,top ,bottom float64 ){_ddd ._eb .Left =_dc .Point (left );_ddd ._eb .Right =_dc .Point (right );_ddd ._eb .Top =_dc .Point (top );_ddd ._eb .Bottom =_dc .Point (bottom );_ddd ._fd =_dcc .PositionAbsolute ;
};

// This method is not supported by Document component and exists solely to satisfy the Drawable interface.
func (_bag *Document )SetMarkedContentID (id int64 ){};

// SetPos sets the absolute position. Changes object positioning to absolute.
func (_ee *Document )SetPos (x ,y float64 ){_ee ._fd =_dcc .PositionAbsolute ;_ee ._ec =x ;_ee ._ab =y };var _acd *_gc .Client ;type margins struct{Left ,Right ,Bottom ,Top _dc .Length ;};

// WaitReady waits for the provided selector to be ready.
// A selector might be  i.e.  `#example` for id  and `.example` for classes. The second parameter defines how to match given selector.
func (_fee *Document )WaitReady (sel string ,by ..._e .ByType ){_gbb :=_e .BySearch ;if len (by )> 0{_gbb =by [0];};_fee ._bgf =append (_fee ._bgf ,_gc .BySelector {Selector :sel ,By :_gbb });};

// SetPageHeight sets the page height for given document.
func (_ebd *Document )SetPageHeight (pageHeight _dc .Length )error {_ebd ._ggd =pageHeight ;_ebd ._fd =_dcc .PositionAbsolute ;return nil ;};

// WaitTime sets the waiting time before the webpage is rendered to PDF.
func (_fea *Document )WaitTime (duration _ae .Duration ){_fea ._gfd =duration };

// WriteToFile writes the document to a file defined by the output path.
func (_ba *Document )WriteToFile (outputPath string )error {if _fbg :=_ba .validate ();_fbg !=nil {return _fbg ;};_feg :=_ae .Second *20+_ba ._gfd ;_fed ,_bf :=_b .WithTimeout (_b .Background (),_feg );defer _bf ();_cfc ,_dbe :=_ba .extract (_fed ,_ba ._af ,_ba ._ggd ,_ba .getMargins ());
if _dbe !=nil {return _dbe ;};_ffcg :=_dcc .New ();for _ ,_ebg :=range _cfc {if _dbe =_ffcg .AddPage (_ebg );_dbe !=nil {return _dbe ;};};return _ffcg .WriteToFile (outputPath );};

// Options are the HTML Client options used for establishing the connection.
type Options struct{

// Hostname defines the hostname for the client. Default value: 'localhost'.
Hostname string ;

// Port defines the port at which the server works. Default value: '8080'
Port int ;

// Secure is the flag that states if the connection uses HTTPS protocol. Default Value: 'false'.
Secure bool ;

// Prefix is an option setting used when the server is working with the URI prefix. Default Value: ''.
Prefix string ;};

// This method is not supported by Document component and exists solely to satisfy the Drawable interface.
func (_cd *Document )GenerateKDict ()(*_da .KDict ,error ){return nil ,nil };

// NewDocument creates new HTML Document used as an input for the creator.Drawable.
func NewDocument (path string )(*Document ,error ){_aee :=&Document {};_gb ,_bdf :=_be .Parse (path );if _bdf !=nil {return nil ,_bdf ;};switch _gb .Scheme {case "\u0068\u0074\u0074\u0070","\u0068\u0074\u0074p\u0073":_aee ._agc ,_bdf =_ge .NewWebURL (path );
if _bdf !=nil {return nil ,_bdf ;};return _aee ,nil ;};_db ,_bdf :=_gf .Stat (path );if _bdf !=nil {return nil ,_bdf ;};if !_db .IsDir (){_aee ._agc ,_bdf =_ge .NewHTMLFile (path );}else {_aee ._agc ,_bdf =_ge .NewZipDirectory (path );};if _bdf !=nil {return nil ,_bdf ;
};return _aee ,nil ;};

// TrimLastPageContent trims the last page content so that next creator blocks are located just at the end of given block.
func (_ed *Document )TrimLastPageContent (){_ed ._bc =true };func (_cae *Document )getMargins ()margins {_bgaf :=_cae ._eb ;if _cae ._fd .IsRelative (){_bgaf .Top =_dc .Millimeter (1);_bgaf .Left =_dc .Millimeter (1);_bgaf .Bottom =_dc .Millimeter (1);
_bgaf .Right =_dc .Millimeter (1);return _bgaf ;};if _bgaf .Top ==nil {_bgaf .Top =_dc .Millimeter (10);};if _bgaf .Bottom ==nil {_bgaf .Bottom =_dc .Millimeter (10);};if _bgaf .Left ==nil {_bgaf .Left =_dc .Millimeter (10);};if _bgaf .Right ==nil {_bgaf .Right =_dc .Millimeter (10);
};return _bgaf ;};

// GetContent returns the content of the document.
func (_bdfa *Document )GetContent ()_ge .Content {return _bdfa ._agc };func (_gff *Document )extract (_fde _b .Context ,_fdgf ,_fgb _dc .Length ,_bce margins )([]*_da .PdfPage ,error ){_ded :=_gc .BuildHTMLQuery ().SetContent (_gff ._agc ).PageSize (_gff ._ff ).PaperWidth (_fdgf ).PaperHeight (_fgb ).Orientation (_gff ._fe ).MarginLeft (_bce .Left ).MarginRight (_bce .Right ).MarginTop (_bce .Top ).MarginBottom (_bce .Bottom ).TimeoutDuration (_gff .getTimeoutDuration ()).WaitTime (_gff ._gfd );
for _ ,_egb :=range _gff ._bgf {_ded .WaitReady (_egb .Selector ,_egb .By );};for _ ,_dee :=range _gff ._ebc {_ded .WaitVisible (_dee .Selector ,_dee .By );};_dec ,_cab :=_ded .Query ();if _cab !=nil {return nil ,_cab ;};var _gee _b .CancelFunc ;if _gff ._bgd !=nil {_fde ,_gee =_b .WithTimeout (_fde ,*_gff ._bgd );
}else {_fde ,_gee =_b .WithTimeout (_fde ,_ae .Second *15);};defer _gee ();_aef ,_cab :=_acd .ConvertHTML (_fde ,_dec );if _cab !=nil {return nil ,_cab ;};_gdd :=_ac .NewReader (_aef .Data );_cee ,_cab :=_da .NewPdfReader (_gdd );if _cab !=nil {return nil ,_cab ;
};return _cee .PageList ,nil ;};

// SetTimeoutDuration sets the timeout duration
// the default timeout is 15 seconds.
func (_geb *Document )SetTimeoutDuration (duration _ae .Duration ){_geb ._bgd =&duration };func (_cg *Document )validate ()error {if _acd ==nil {return ErrNoClient ;};if _cg ._agc ==nil {return ErrContentNotDefined ;};return nil ;};func (_eca *Document )getTimeoutDuration ()_ae .Duration {if _eca ._bgd !=nil {return *_eca ._bgd ;
};return 0;};var ErrNoClient =_c .New ("\u0055n\u0069\u0048\u0054\u004d\u004c\u0020\u0063\u006c\u0069\u0065\u006et\u0020\u006e\u006f\u0074\u0020\u0066\u006f\u0075\u006e\u0064");func _bfg (_eg _a .Image )float64 {_ecb :=_eg .Bounds ();var (_bcb int ;_fdb _d .Color ;
_bfe ,_baa ,_dag uint32 ;);_egd ,_aed :=_ecb .Min .X ,_ecb .Max .Y -1;_ddb :=_eg .At (_egd ,_aed );_gda ,_abd ,_dea ,_ :=_ddb .RGBA ();_acdb :=_gda ==_ga .MaxUint16 &&_abd ==_ga .MaxUint16 &&_dea ==_ga .MaxUint16 ;for _aed =_ecb .Max .Y -1;_aed >=_ecb .Min .Y ;
_aed --{var _efb bool ;for _egd =_ecb .Min .X ;_egd < _ecb .Max .X ;_egd ++{_fdb =_eg .At (_egd ,_aed );_bfe ,_baa ,_dag ,_ =_fdb .RGBA ();if (_acdb &&!(_bfe ==_gda &&_baa ==_abd &&_dea ==_dag ))||(!_acdb &&(_ga .Abs (float64 (_bfe )-float64 (_gda ))/float64 (_ga .MaxUint16 )> 0.03||_ga .Abs (float64 (_baa )-float64 (_abd ))/float64 (_ga .MaxUint16 )> 0.03||_ga .Abs (float64 (_dag )-float64 (_dea ))/float64 (_ga .MaxUint16 )> 0.03)){_efb =true ;
break ;};};if _efb {break ;};_bcb =_aed ;};return float64 (_ecb .Max .Y -_bcb )/float64 (_ecb .Max .Y );};

// NewDocumentFromString creates a new Document from the provided HTML string.
func NewDocumentFromString (html string )(*Document ,error ){_gd ,_agf :=_ge .NewStringContent (html );if _agf !=nil {return nil ,_agf ;};_fb :=&Document {};_fb ._agc =_gd ;return _fb ,nil ;};

// SetMarginRight sets the left margin.
func (_cec *Document )SetMarginRight (margin _dc .Length ){_cec ._eb .Right =margin };func _ca ()error {_aeg :=_f .GetLicenseKey ();if _aeg ==nil {return _c .New ("\u006e\u006f\u0020\u006cic\u0065\u006e\u0073\u0065\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");
};if !_aeg .IsLicensed (){return _c .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u006f\u0072 \u006e\u006f\u0020\u006c\u0069\u0063\u0065n\u0073\u0065\u0020\u0070\u0072\u006f\u0076\u0069\u0064\u0065\u0064");};return nil ;};

// SetMarginTop sets the left margin.
func (_dbf *Document )SetMarginTop (margin _dc .Length ){_dbf ._eb .Top =margin };

// GetPdfPages is a function that converts provided input content and
func (_abg *Document )GetPdfPages (ctx _b .Context )([]*_da .PdfPage ,error ){if _fdg :=_abg .validate ();_fdg !=nil {return nil ,_fdg ;};return _abg .extract (ctx ,_abg ._af ,_abg ._ggd ,_abg .getMargins ());};

// This method is not supported by Document component and exists solely to satisfy the Drawable interface.
func (_cdd *Document )SetStructureType (structureType _da .StructureType ){};

// ConnectOptions creates UniHTML HTTP Client and tries to establish connection with the server.
func ConnectOptions (o Options )error {_acd =_gc .New (_gc .Options {Hostname :o .Hostname ,Port :o .Port ,HTTPS :o .Secure });_cf ,_adb :=_b .WithTimeout (_b .Background (),_ae .Second *5);defer _adb ();if _dcca :=_acd .HealthCheck (_cf );_dcca !=nil {return _dcca ;
};return nil ;};