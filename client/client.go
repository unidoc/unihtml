//
// Copyright 2020 FoxyUtils ehf. All rights reserved.
//
// This is a commercial product and requires a license to operate.
// A trial license can be obtained at https://unidoc.io
//
// DO NOT EDIT: generated by unitwist Go source code obfuscator.
//
// Use of this source code is governed by the UniDoc End User License Agreement
// terms that can be accessed at https://unidoc.io/eula/

// Package client contains HTML Converter HTTP Client. The Client implements htmlcreator.HTMLConverter interface
// for the UniPDF module and can be used as a plugin for the UniPDF creator.Creator.
package client ;import (_e "bytes";_ff "compress/flate";_da "compress/gzip";_c "context";_be "encoding/json";_f "errors";_gg "fmt";_ged "github.com/unidoc/unihtml/content";_gb "github.com/unidoc/unihtml/selector";_dg "github.com/unidoc/unihtml/sizes";_ge "github.com/unidoc/unipdf/v4/common";
_d "io";_ga "net";_g "net/http";_ec "net/url";_ba "strconv";_ea "strings";_cg "time";);

// Validate checks the validity of the RenderParameters.
func (_cffa *RenderParameters )Validate ()error {if _cffa .WaitTime > _cg .Minute *3{return _f .New ("\u0074\u006f\u006f\u0020\u006c\u006f\u006e\u0067 \u006d\u0069\u006eim\u0075\u006d\u0020\u006c\u006f\u0061d\u0020\u0074\u0069\u006d\u0065\u002e\u0020\u004d\u0061\u0078\u0069\u006d\u0075\u006d\u0020i\u0073\u0020\u0033\u0020\u006d\u0069\u006e\u0075t\u0065\u0073");
};for _ ,_bff :=range _cffa .WaitReady {if _fbcb :=_bff .Validate ();_fbcb !=nil {return _gg .Errorf ("\u006f\u006e\u0065\u0020\u006f\u0066\u0020w\u0061\u0069\u0074 \u0072\u0065\u0061\u0064y\u0020\u0073\u0065\u006c\u0065\u0063\u0074\u006f\u0072\u0020\u0069\u0073\u0020\u006e\u006f\u0074\u0020\u0076\u0061\u006c\u0069\u0064\u003a\u0020\u0025\u0077",_fbcb );
};};return nil ;};func (_fbc *Client )getGenerateRequest (_gc _c .Context ,_ac *Query )(*_g .Request ,error ){_fc :=generatePDFRequestV1 {Method :_ac .Method ,PageParameters :_ac .PageParameters ,RenderParameters :_ac .RenderParameters ,TimeoutDuration :int64 (_ac .TimeoutDuration )};
switch _ac .Method {case "\u0077\u0065\u0062":_fc .ContentURL =_ac .URL ;case "\u0064\u0069\u0072","\u0068\u0074\u006d\u006c":_fc .ContentType =_ac .ContentType ;_fc .Content =_ac .Content ;};_ggd :=new (_e .Buffer );if _dga :=_be .NewEncoder (_ggd ).Encode (&_fc );
_dga !=nil {return nil ,_gg .Errorf ("e\u006e\u0063\u006f\u0064\u0069\u006eg\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0020f\u0061\u0069\u006ce\u0064:\u0020\u0025\u0076",_dga );};_aa :=_fbc .Options .Addr ();_aa =_gg .Sprintf ("\u0025s\u002f\u0076\u0031\u002f\u0070\u0064f",_aa );
_cc ,_egd :=_g .NewRequest ("\u0050\u004f\u0053\u0054",_aa ,_ggd );if _egd !=nil {return nil ,_egd ;};_cc .Header .Set ("\u0043\u006f\u006et\u0065\u006e\u0074\u002d\u0054\u0079\u0070\u0065","\u0061\u0070p\u006c\u0069\u0063a\u0074\u0069\u006f\u006e\u002f\u006a\u0073\u006f\u006e");
_cc .Header .Set ("\u0041c\u0063e\u0070\u0074\u002d\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067","\u0064\u0065\u0066\u006ca\u0074\u0065\u002c\u0020\u0067\u007a\u0069\u0070\u003b\u0071=\u0031.\u0030\u002c\u0020\u002a\u003b\u0071\u003d0\u002e\u0035");
_cc =_cc .WithContext (_gc );return _cc ,nil ;};

// Validate checks if provided Query is valid.
func (_ecd *Query )Validate ()error {switch _ecd .Method {case "\u0077\u0065\u0062":if _ecd .URL ==""{return ErrMissingData ;};case "\u0064\u0069\u0072","\u0068\u0074\u006d\u006c":if len (_ecd .Content )==0{return ErrMissingData ;};if _ecd .ContentType ==""{return ErrContentType ;
};default:return _gg .Errorf ("\u0075\u006e\u0064ef\u0069\u006e\u0065\u0064\u0020\u0063\u006f\u006e\u0074e\u006et\u0020q\u0075e\u0072\u0079\u0020\u006d\u0065\u0074\u0068\u006f\u0072\u003a\u0020\u0025\u0073",_ecd .Method );};if _aag :=_ecd .PageParameters .Validate ();
_aag !=nil {return _aag ;};if _fba :=_ecd .RenderParameters .Validate ();_fba !=nil {return _fba ;};return nil ;};

// Options are the client options used by the HTTP client.
type Options struct{HTTPS bool ;Hostname string ;Port int ;DefaultTimeout _cg .Duration ;Prefix string ;};

// WithDefaultTimeout sets the DefaultTimeout option for the client options.
func WithDefaultTimeout (option _cg .Duration )Option {return func (_daa *Options ){_daa .DefaultTimeout =option };};

// MarginBottom sets up the MarginBottom parameter for the query.
func (_fe *QueryBuilder )MarginBottom (marginBottom _dg .Length )*QueryBuilder {_fe ._acc .PageParameters .MarginBottom =marginBottom ;return _fe ;};

// Validate checks if the QueryBuilder had no errors during composition and creation.
func (_af *QueryBuilder )Validate ()error {if _af ._ab !=nil {return _af ._ab ;};return _af ._acc .Validate ();};

// WithHTTPS sets the TLS option for the client options.
func WithHTTPS (useHTTPS bool )Option {return func (_dc *Options ){_dc .HTTPS =useHTTPS }};

// HealthCheck connects to the server and check the health status of the server.
func (_ad *Client )HealthCheck (ctx _c .Context )error {_ee :=_ad .Options .Addr ();_ee =_gg .Sprintf ("\u0025s\u002f\u0068\u0065\u0061\u006c\u0074h",_ee );_eg ,_gedd :=_g .NewRequest ("\u0047\u0045\u0054",_ee ,nil );if _gedd !=nil {return _gedd ;};_eg =_eg .WithContext (ctx );
_eb ,_gedd :=_ad .Client .Do (_eg );if _gedd !=nil {return _gedd ;};switch _eb .StatusCode {case _g .StatusOK :return nil ;case _g .StatusNotFound :return ErrNotFound ;case _g .StatusInternalServerError :return ErrInternalError ;case _g .StatusBadGateway :return ErrBadGateway ;
default:return ErrNotImplemented ;};};

// Client is a structure that is a HTTP client for the unihtml server.
type Client struct{Options Options ;Client *_g .Client ;};

// DefaultPageParameters creates default parameters.
func DefaultPageParameters ()PageParameters {return PageParameters {Orientation :_dg .Portrait }};

// Query gets the Query from provided query builder. If some error occurred during build process
// or the input is not valid the function would return an error.
func (_geg *QueryBuilder )Query ()(*Query ,error ){if _acg :=_geg .Validate ();_acg !=nil {return nil ,_acg ;};return &_geg ._acc ,nil ;};

// Validate checks validity of the selector.
func (_cbc BySelector )Validate ()error {if _cbc .Selector ==""{return _f .New ("\u0070\u0072\u006fvi\u0064\u0065\u0064\u0020\u0065\u006d\u0070\u0074\u0079\u0020\u0073\u0065\u006c\u0065\u0063\u0074\u006f\u0072");};if _aae :=_cbc .By .Validate ();_aae !=nil {return _aae ;
};return nil ;};

// RenderParameters are the parameters related with the rendering.
type RenderParameters struct{WaitTime _cg .Duration `schema:"minimum-load-time" json:"waitTime"`;WaitReady []BySelector `json:"waitReady"`;WaitVisible []BySelector `json:"waitVisible"`;};

// BySelector is a structure that defines a selector with it's query 'by' type.
type BySelector struct{Selector string `json:"selector"`;By _gb .ByType `json:"by"`;};

// Addr gets the HTTP address URI used by the http.Client.
func (_fcb *Options )Addr ()string {_cb :=_ea .Builder {};_cb .WriteString ("\u0068\u0074\u0074\u0070");if _fcb .HTTPS {_cb .WriteRune ('s');};_cb .WriteString ("\u003a\u002f\u002f");_cb .WriteString (_fcb .Hostname );_cb .WriteRune (':');_cb .WriteString (_ba .Itoa (_fcb .Port ));
if _fcb .Prefix !=""{_cb .WriteString (_fcb .Prefix );};return _cb .String ();};

// Landscape sets up the landscape portrait orientation.
func (_bgg *QueryBuilder )Landscape ()*QueryBuilder {_bgg ._acc .PageParameters .Orientation =_dg .Landscape ;return _bgg ;};var (ErrMissingData =_f .New ("\u006di\u0073s\u0069\u006e\u0067\u0020\u0069n\u0070\u0075t\u0020\u0064\u0061\u0074\u0061");ErrContentType =_f .New ("i\u006ev\u0061\u006c\u0069\u0064\u0020\u0063\u006f\u006et\u0065\u006e\u0074\u0020ty\u0070\u0065");
ErrContentTypeDeclared =_f .New ("\u0063\u006f\u006e\u0074\u0065\u006e\u0074\u0020\u0074\u0079\u0070\u0065\u0020\u0069\u0073 \u0061l\u0072\u0065\u0061\u0064\u0079\u0020\u0064\u0065\u0063\u006c\u0061\u0072\u0065\u0064"););

// ParseOptions parses options for the Client.
func ParseOptions (connectPath string )(Options ,error ){if !_ea .HasPrefix (connectPath ,"\u0068\u0074\u0074\u0070"){connectPath ="\u0068t\u0074\u0070\u003a\u002f\u002f"+connectPath ;};_dad ,_ecf :=_ec .Parse (connectPath );if _ecf !=nil {return Options {},_gg .Errorf ("p\u0072\u006f\u0076\u0069\u0064\u0065d\u0020\u0069\u006e\u0076\u0061\u006ci\u0064\u0020\u0075\u006e\u0069\u0068\u0074m\u006c\u002d\u0073\u0065\u0072\u0076\u0065\u0072\u0020\u0075r\u006c");
};var _eca int ;if _dad .Port ()!=""{_eca ,_ecf =_ba .Atoi (_dad .Port ());if _ecf !=nil {return Options {},_gg .Errorf ("\u0070\u0061\u0072si\u006e\u0067\u0020\u0070\u006f\u0072\u0074\u0020\u0066\u0061\u0069\u006c\u0065\u0064\u003a\u0020\u0025\u0077",_ecf );
};};return Options {Hostname :_dad .Hostname (),Port :_eca ,HTTPS :_dad .Scheme =="\u0068\u0074\u0074p\u0073",Prefix :_dad .Path },nil ;};

// WithPort sets the Port option for the client options.
func WithPort (option int )Option {return func (_cfd *Options ){_cfd .Port =option }};

// Validate checks if the parameters are valid.
func (_cff *PageParameters )Validate ()error {if _cff .PaperWidth !=nil {if _cff .PaperWidth .Millimeters ()< 0{return _f .New ("\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u0050\u0061\u0070\u0065\u0072\u0057id\u0074\u0068");
};};if _cff .PaperHeight !=nil {if _cff .PaperHeight .Millimeters ()< 0{return _f .New ("\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0076a\u006c\u0075\u0065\u0020\u0066\u006f\u0072 \u0050\u0061\u0070\u0065\u0072\u0048\u0065\u0069\u0067\u0068\u0074");
};};if _cff .MarginTop !=nil {if _cff .MarginTop .Millimeters ()< 0{return _f .New ("\u006e\u0065\u0067\u0061t\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020f\u006fr\u0020\u004d\u0061\u0072\u0067\u0069\u006eT\u006f\u0070");};};if _cff .MarginBottom !=nil {if _cff .MarginBottom .Millimeters ()< 0{return _f .New ("\u006e\u0065\u0067a\u0074\u0069\u0076\u0065 \u0076\u0061\u006c\u0075\u0065\u0020\u0066o\u0072\u0020\u004d\u0061\u0072\u0067\u0069\u006e\u0042\u006f\u0074\u0074\u006f\u006d");
};};if _cff .MarginLeft !=nil {if _cff .MarginLeft .Millimeters ()< 0{return _f .New ("\u006e\u0065g\u0061\u0074\u0069\u0076\u0065\u0020\u0076\u0061\u006c\u0075\u0065\u0020\u0066\u006f\u0072\u0020\u004d\u0061\u0072\u0067\u0069\u006eLe\u0066\u0074");};};
if _cff .MarginRight !=nil {if _cff .MarginRight .Millimeters ()< 0{return _f .New ("\u006e\u0065\u0067\u0061\u0074\u0069\u0076\u0065\u0020\u0076a\u006c\u0075\u0065\u0020\u0066\u006f\u0072 \u004d\u0061\u0072\u0067\u0069\u006e\u0052\u0069\u0067\u0068\u0074");
};};if _cff .PageSize !=nil &&!_cff .PageSize .IsAPageSize (){return _f .New ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0070\u0061\u0067\u0065 \u0073\u0069\u007a\u0065");};return nil ;};

// WaitVisible waits for the selector to get visible.
func (_cda *QueryBuilder )WaitVisible (selector string ,by _gb .ByType )*QueryBuilder {_cda ._acc .RenderParameters .WaitVisible =append (_cda ._acc .RenderParameters .WaitVisible ,BySelector {Selector :selector ,By :by });return _cda ;};

// ConvertHTML converts provided Query input into PDF file data.
// Implements creator.HTMLConverter interface.
func (_ggc *Client )ConvertHTML (ctx _c .Context ,q *Query )(*PDFResponse ,error ){if _bf :=q .Validate ();_bf !=nil {return nil ,_bf ;};_cd ,_bg :=_ggc .getGenerateRequest (ctx ,q );if _bg !=nil {return nil ,_bg ;};_ge .Log .Trace ("\u0052\u0065\u0071\u0075\u0065\u0073\u0074 \u002d\u0020\u0025s\u0020\u002d\u0020\u0025s\u0025\u0073\u002c\u0020\u0048\u0065\u0061\u0064\u0065\u0072\u0073\u003a\u0020\u0025\u0076\u002c\u0020\u0051\u0075\u0065\u0072\u0079\u003a\u0020\u0025\u0076",_cd .Method ,_cd .URL .Hostname (),_cd .URL .Path ,_cd .Header ,_cd .URL .Query ());
_bd :=*_ggc .Client ;if q .TimeoutDuration !=0{_bd .Timeout =q .TimeoutDuration ;};_ebg ,_bg :=_bd .Do (_cd );if _bg !=nil {return nil ,_bg ;};var _gag error ;switch _ebg .StatusCode {case _g .StatusNotFound :_gag =ErrNotFound ;case _g .StatusBadRequest :_gag =ErrBadRequest ;
case _g .StatusNotImplemented :_gag =ErrNotImplemented ;case _g .StatusUnauthorized :_gag =ErrUnauthorized ;case _g .StatusRequestTimeout :_gag =ErrTimedOut ;case _g .StatusCreated :default:_gag =ErrInternalError ;};_dd :=_ebg .Body ;switch _ebg .Header .Get ("\u0043\u006fn\u0074\u0065\u006et\u002d\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067"){case "\u0067\u007a\u0069\u0070":_dd ,_bg =_da .NewReader (_ebg .Body );
if _bg !=nil {return nil ,_bg ;};case "\u0064e\u0066\u006c\u0061\u0074\u0065":_dd =_ff .NewReader (_ebg .Body );case "":default:return nil ,_gg .Errorf ("\u0075\u006e\u0073\u0075\u0070\u0070\u006f\u0072\u0074\u0065\u0064\u0020\u0043o\u006e\u0074\u0065\u006e\u0074\u002dE\u006e\u0063\u006f\u0064\u0069\u006e\u0067\u003a\u0020\u0025\u0073\u0020\u0068e\u0061\u0064\u0065\u0072",_ebg .Header .Get ("\u0043\u006fn\u0074\u0065\u006et\u002d\u0045\u006e\u0063\u006f\u0064\u0069\u006e\u0067"));
};_cf ,_bg :=_d .ReadAll (_dd );if _bg !=nil &&_gag ==nil {return nil ,_gg .Errorf ("\u0055\u006e\u0069HT\u004d\u004c\u0020\u0073\u0065\u0072\u0076\u0065\u0072\u0020\u0065\u0072\u0072\u006f\u0072\u0020\u0025\u0073",_bg );};_ge .Log .Trace ("\u005b\u0025\u0064]\u0020\u0025\u0073\u0020\u0025\u0073\u0025\u0073",_ebg .StatusCode ,_cd .Method ,_cd .URL .Host ,_cd .URL .Path );
if _gag !=nil {return nil ,_gg .Errorf ("\u0025\u0073\u0020%\u0077",string (_cf ),_gag );};_fb :=_ebg .Header .Get ("\u0058\u002d\u004a\u006f\u0062\u002d\u0049\u0044");_ge .Log .Trace ("\u0052\u0065\u0073\u0070\u006f\u006e\u0073\u0065\u0020I\u0044\u0020\u0025\u0073",_fb );
return &PDFResponse {ID :_fb ,Data :_cf },nil ;};

// WaitTime sets the minimum load time parameter for the page rendering.
func (_fd *QueryBuilder )WaitTime (d _cg .Duration )*QueryBuilder {_fd ._acc .RenderParameters .WaitTime =d ;return _fd ;};

// PaperHeight sets up the PaperHeight (in cm) parameter for the query.
func (_acf *QueryBuilder )PaperHeight (paperHeight _dg .Length )*QueryBuilder {_acf ._acc .PageParameters .PaperHeight =paperHeight ;return _acf ;};

// Query is a structure that contains query parameters and the content used for the HTMLConverter conversion process.
type Query struct{Content []byte ;ContentType string ;URL string ;Method string ;PageParameters PageParameters ;RenderParameters RenderParameters ;TimeoutDuration _cg .Duration ;};func (_bfa *Client )setQueryValues (_ca *_g .Request ,_fa *Query ){_ed :=_ca .URL .Query ();
_bc :=_fa .PageParameters ;if _bc .PageSize !=nil {_ed .Set ("\u0070a\u0067\u0065\u002d\u0073\u0069\u007ae",_bc .PageSize .String ());};if _bc .PaperHeight !=nil {_ed .Set ("\u0070\u0061\u0070e\u0072\u002d\u0068\u0065\u0069\u0067\u0068\u0074",_bc .PaperHeight .String ());
};if _bc .PaperWidth !=nil {_ed .Set ("p\u0061\u0070\u0065\u0072\u002d\u0077\u0069\u0064\u0074\u0068",_bc .PaperWidth .String ());};if _bc .MarginTop !=nil {_ed .Set ("\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0074\u006f\u0070",_bc .MarginTop .String ());
};if _bc .MarginBottom !=nil {_ed .Set ("\u006d\u0061\u0072\u0067\u0069\u006e\u002d\u0062\u006f\u0074\u0074\u006f\u006d",_bc .MarginBottom .String ());};if _bc .MarginRight !=nil {_ed .Set ("\u006d\u0061\u0072g\u0069\u006e\u002d\u0072\u0069\u0067\u0068\u0074",_bc .MarginRight .String ());
};if _bc .MarginLeft !=nil {_ed .Set ("m\u0061\u0072\u0067\u0069\u006e\u002d\u006c\u0065\u0066\u0074",_bc .MarginLeft .String ());};if _bc .Orientation ==_dg .Landscape {_ed .Set ("o\u0072\u0069\u0065\u006e\u0074\u0061\u0074\u0069\u006f\u006e",_bc .Orientation .String ());
};if _fa .RenderParameters .WaitTime !=0{_ed .Set ("\u006d\u0069\u006e\u0069\u006d\u0075\u006d\u002d\u006c\u006f\u0061\u0064-\u0074\u0069\u006d\u0065",_ba .FormatInt (int64 (_fa .RenderParameters .WaitTime /_cg .Millisecond ),10));};_ca .URL .RawQuery =_ed .Encode ();
};

// WithHostname sets the Hostname option for the client options.
func WithHostname (option string )Option {return func (_bgb *Options ){_bgb .Hostname =option }};

// WithPrefix sets the client prefix.
func WithPrefix (prefix string )Option {return func (_cad *Options ){_cad .Prefix =prefix }};

// Option is a function that changes client options.
type Option func (_baa *Options );

// PDFResponse is the response used by the HTMLConverter.
type PDFResponse struct{ID string `json:"id"`;Data []byte `json:"data"`;};

// BuildHTMLQuery creates a Query builder that is supposed to create valid
func BuildHTMLQuery ()*QueryBuilder {return &QueryBuilder {}};

// WaitReady waits for the selector to get ready - 'loaded'.
func (_egf *QueryBuilder )WaitReady (selector string ,by _gb .ByType )*QueryBuilder {_egf ._acc .RenderParameters .WaitReady =append (_egf ._acc .RenderParameters .WaitReady ,BySelector {Selector :selector ,By :by });return _egf ;};

// SetContent sets custom data with it's content type.
func (_cga *QueryBuilder )SetContent (content _ged .Content )*QueryBuilder {if _cga ._ab !=nil {return _cga ;};switch content .Method (){case "\u0064\u0069\u0072","\u0068\u0074\u006d\u006c":if _cga ._acc .ContentType !=""{_cga ._ab =ErrContentTypeDeclared ;
return _cga ;};if content .ContentType ()==""{_cga ._ab =_gg .Errorf ("\u0065\u006d\u0070\u0074y\u0020\u0063\u0075\u0073\u0074\u006f\u006d\u0020\u0063\u006fn\u0074e\u006e\u0074\u0020\u0074\u0079\u0070\u0065 \u0025\u0077",ErrContentType );return _cga ;};
_cga ._acc .Content =content .Data ();_cga ._acc .ContentType =content .ContentType ();case "\u0077\u0065\u0062":if _cga ._acc .ContentType !=""{_cga ._ab =ErrContentTypeDeclared ;return _cga ;};_cga ._acc .URL =string (content .Data ());_cga ._acc .ContentType =content .ContentType ();
default:_cga ._ab =_gg .Errorf ("\u0069\u006e\u0076\u0061\u006c\u0069\u0064\u0020\u0063\u006f\u006et\u0065\u006e\u0074\u0020\u006d\u0065\u0074\u0068\u006f\u0064:\u0020\u0025\u0073",content .Method ());return _cga ;};_cga ._acc .Method =content .Method ();
return _cga ;};

// PageSize sets up the PageSize parameter for the query.
func (_bdb *QueryBuilder )PageSize (pageSize _dg .PageSize )*QueryBuilder {if pageSize !=_dg .Undefined {_bdb ._acc .PageParameters .PageSize =&pageSize ;};return _bdb ;};

// MarginLeft sets up the MarginLeft parameter for the query.
func (_aba *QueryBuilder )MarginLeft (marginLeft _dg .Length )*QueryBuilder {_aba ._acc .PageParameters .MarginLeft =marginLeft ;return _aba ;};var (ErrNotFound =_f .New ("\u006eo\u0074\u0020\u0066\u006f\u0075\u006ed");ErrBadRequest =_f .New ("b\u0061\u0064\u0020\u0072\u0065\u0071\u0075\u0065\u0073\u0074");
ErrNotImplemented =_f .New ("\u006eo\u0074 \u0069\u006d\u0070\u006c\u0065\u006d\u0065\u006e\u0074\u0065\u0064");ErrInternalError =_f .New ("i\u006e\u0074\u0065\u0072na\u006c \u0073\u0065\u0072\u0076\u0065r\u0020\u0065\u0072\u0072\u006f\u0072");ErrBadGateway =_f .New ("b\u0061\u0064\u0020\u0067\u0061\u0074\u0065\u0077\u0061\u0079");
ErrUnauthorized =_f .New ("\u0075\u006e\u0061u\u0074\u0068\u006f\u0072\u0069\u007a\u0065\u0064");ErrTimedOut =_f .New ("\u0072\u0065\u0071\u0075\u0065\u0073\u0074\u0020\u0074\u0069\u006d\u0065d\u0020\u006f\u0075\u0074"););

// MarginRight sets up the MarginRight parameter for the query.
func (_cgg *QueryBuilder )MarginRight (marginRight _dg .Length )*QueryBuilder {_cgg ._acc .PageParameters .MarginRight =marginRight ;return _cgg ;};

// TimeoutDuration sets the server query duration timeout.
// Once the timeout is reached the server will return an error.
func (_eee *QueryBuilder )TimeoutDuration (d _cg .Duration )*QueryBuilder {_eee ._acc .TimeoutDuration =d ;return _eee ;};

// MarginTop sets up the MarginTop parameter for the query.
func (_dab *QueryBuilder )MarginTop (marginTop _dg .Length )*QueryBuilder {_dab ._acc .PageParameters .MarginTop =marginTop ;return _dab ;};

// New creates new client with provided options.
func New (o Options )*Client {o .DefaultTimeout =_cg .Second *30;if o .Port <=0{o .Port =8080;};if o .Hostname ==""{o .Hostname ="\u00312\u0037\u002e\u0030\u002e\u0030\u002e1";};var _a =&_g .Transport {DialContext :(&_ga .Dialer {Timeout :5*_cg .Second }).DialContext ,TLSHandshakeTimeout :5*_cg .Second };
_ge .Log .Info ("\u0043l\u0069e\u006e\u0074\u0020\u0041\u0064\u0064\u0072\u003a\u0020\u0025\u0073",o .Addr ());return &Client {Options :o ,Client :&_g .Client {Transport :_a ,Timeout :o .DefaultTimeout }};};

// Orientation sets the page orientation for the Query.
func (_bgbc *QueryBuilder )Orientation (orientation _dg .Orientation )*QueryBuilder {_bgbc ._acc .PageParameters .Orientation =orientation ;return _bgbc ;};

// QueryBuilder is the query that converts HTMLConverter defined data
type QueryBuilder struct{_acc Query ;_ab error ;};type generatePDFRequestV1 struct{Content []byte `json:"content"`;ContentType string `json:"contentType"`;ContentURL string `json:"contentURL"`;Method string `json:"method"`;ExpiresAt int64 `json:"expiresAt"`;
TimeoutDuration int64 `json:"timeoutDuration,omitempty"`;PageParameters ;RenderParameters ;};

// PageParameters are the query parameters used in the PDF generation.
type PageParameters struct{

// PaperWidth sets the width of the paper.
PaperWidth _dg .Length `schema:"paper-width" json:"paperWidth"`;

// PaperHeight is the height of the output paper.
PaperHeight _dg .Length `schema:"paper-height" json:"paperHeight"`;

// PageSize is the page size string.
PageSize *_dg .PageSize `schema:"page-size" json:"pageSize"`;

// Orientation defines if the output should be in a landscape format.
Orientation _dg .Orientation `schema:"orientation" json:"orientation"`;

// MarginTop sets up the Top Margin for the output.
MarginTop _dg .Length `schema:"margin-top" json:"marginTop"`;

// MarginBottom sets up the Bottom Margin for the output.
MarginBottom _dg .Length `schema:"margin-bottom" json:"marginBottom"`;

// MarginLeft sets up the Left Margin for the output.
MarginLeft _dg .Length `schema:"margin-left" json:"marginLeft"`;

// MarginRight sets up the Right Margin for the output.
MarginRight _dg .Length `schema:"margin-right" json:"marginRight"`;};

// Portrait sets up the portrait page orientation.
func (_fg *QueryBuilder )Portrait ()*QueryBuilder {_fg ._acc .PageParameters .Orientation =_dg .Portrait ;return _fg ;};

// PaperWidth sets up the PaperWidth (in cm) parameter for the query.
func (_eea *QueryBuilder )PaperWidth (paperWidth _dg .Length )*QueryBuilder {_eea ._acc .PageParameters .PaperWidth =paperWidth ;return _eea ;};

// Err gets the error which could occur in the query.
func (_abd *QueryBuilder )Err ()error {return _abd ._ab };